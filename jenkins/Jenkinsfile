pipeline {
    agent any

    environment {
        DB_HOST = "db"
        DB_PORT = "3306"
        DB_DATABASE = "user_management"
        DB_USERNAME = "root"
        DB_PASSWORD = "root"
    }

    stages {
        stage('Setup Environment') {
            steps {
                script {
                    // Kiểm tra xem docker-compose đã cài chưa, nếu chưa thì cài
                    def dockerComposeExists = sh(script: 'command -v docker-compose', returnStatus: true) == 0
                    if (!dockerComposeExists) {
                        echo 'docker-compose not found, installing locally...'
                        sh 'curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o ./docker-compose'
                        sh 'chmod +x ./docker-compose'
                    } else {
                        echo 'docker-compose already installed'
                    }
                    // Kiểm tra phiên bản, ưu tiên ./docker-compose nếu vừa cài
                    sh './docker-compose --version || docker-compose --version'
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/quakhubuon/User-Management.git'
            }
        }

        stage('Build Docker Images') {
            steps {
                sh './docker-compose -f docker/docker-compose.yml build || docker-compose -f docker/docker-compose.yml build'
            }
        }

        stage('Run Containers') {
            steps {
                sh './docker-compose -f docker/docker-compose.yml up -d || docker-compose -f docker/docker-compose.yml up -d'
            }
        }

        stage('Database Migration') {
            steps {
                sh 'docker exec laravel_backend php artisan migrate'
            }
        }
    }

    post {
        success {
            echo 'Deployment Successful!'
        }
        failure {
            echo 'Deployment Failed!'
        }
    }
}